<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>高可用 on Apache Flink</title>
    <link>//localhost/flink/flink-docs-master/zh/docs/deployment/ha/</link>
    <description>Recent content in 高可用 on Apache Flink</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="//localhost/flink/flink-docs-master/zh/docs/deployment/ha/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>概览</title>
      <link>//localhost/flink/flink-docs-master/zh/docs/deployment/ha/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost/flink/flink-docs-master/zh/docs/deployment/ha/overview/</guid>
      <description>高可用 # JobManager 高可用（HA）模式加强了 Flink 集群防止 JobManager 故障的能力。 此特性确保 Flink 集群将始终持续执行你提交的作业。
JobManager 高可用 # JobManager 协调每个 Flink 的部署。它同时负责 调度 和 资源管理。
默认情况下，每个 Flink 集群只有一个 JobManager 实例。这会导致 单点故障（SPOF）：如果 JobManager 崩溃，则不能提交任何新程序，运行中的程序也会失败。
使用 JobManager 高可用模式，你可以从 JobManager 失败中恢复，从而消除单点故障。你可以为每个集群部署配置高可用模式。 有关更多信息，请参阅 高可用服务。
如何启用集群高可用 # JobManager 高可用一般概念是指，在任何时候都有 一个领导者 JobManager，如果领导者出现故障，则有多个备用 JobManager 来接管领导。这保证了 不存在单点故障，只要有备用 JobManager 担任领导者，程序就可以继续运行。
如下是一个使用三个 JobManager 实例的例子：
Flink 的 高可用服务 封装了所需的服务，使一切可以正常工作：
领导者选举：从 n 个候选者中选出一个领导者 服务发现：检索当前领导者的地址 状态持久化：继承程序恢复作业所需的持久化状态（JobGraphs、用户代码jar、已完成的检查点） Back to top
高可用服务 # Flink 提供了两种高可用服务实现：
ZooKeeper：每个 Flink 集群部署都可以使用 ZooKeeper HA 服务。它们需要一个运行的 ZooKeeper 复制组（quorum）。</description>
    </item>
    
    <item>
      <title>ZooKeeper 高可用服务</title>
      <link>//localhost/flink/flink-docs-master/zh/docs/deployment/ha/zookeeper_ha/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost/flink/flink-docs-master/zh/docs/deployment/ha/zookeeper_ha/</guid>
      <description>ZooKeeper 高可用服务 # Flink 的 ZooKeeper 高可用模式使用 ZooKeeper 提供高可用服务。
Flink 利用 ZooKeeper 在所有运行的 JobManager 实例之间进行 分布式协调。ZooKeeper 是一个独立于 Flink 的服务，它通过 leader 选举和轻量级的一致性状态存储来提供高可靠的分布式协调。查看 ZooKeeper入门指南，了解更多关于 ZooKeeper 的信息。Flink 包含 启动一个简单的ZooKeeper 的安装脚本。
配置 # 为了启用高可用集群（HA-cluster），你必须设置以下配置项:
high-availability (必要的): high-availability 配置项必须设置为 zookeeper。
high-availability: zookeeper high-availability.storageDir (必要的): JobManager 元数据持久化到文件系统 high-availability.storageDir 配置的路径中，并且在 ZooKeeper 中只能有一个目录指向此位置。
high-availability.storageDir: hdfs:///flink/recovery storageDir 存储要从 JobManager 失败恢复时所需的所有元数据。
high-availability.zookeeper.quorum (必要的): ZooKeeper quorum 是一个提供分布式协调服务的复制组。
high-availability.zookeeper.quorum: address1:2181[,...],addressX:2181 每个 addressX:port 指的是一个 ZooKeeper 服务器，它可以被 Flink 在给定的地址和端口上访问。
high-availability.zookeeper.path.root (推荐的): ZooKeeper 根节点，集群的所有节点都放在该节点下。</description>
    </item>
    
    <item>
      <title>Kubernetes 高可用服务</title>
      <link>//localhost/flink/flink-docs-master/zh/docs/deployment/ha/kubernetes_ha/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost/flink/flink-docs-master/zh/docs/deployment/ha/kubernetes_ha/</guid>
      <description>Kubernetes 高可用服务 # Flink 的 Kubernetes 高可用模式使用 Kubernetes 提供高可用服务。
Kubernetes 高可用服务只能在部署到 Kubernetes 时使用。因此，当使用 在 Kubernetes 上单节点部署 Flink 或 Flink 原生 Kubernetes 集成 两种模式时，可以对它们进行配置。
准备 # 为了使用 Flink 的 Kubernetes 高可用服务，你必须满足以下先决条件:
Kubernetes &amp;gt;= 1.9. 具有创建、编辑、删除 ConfigMaps 权限的服务帐户。想了解更多信息，请查看如何在 Flink 原生 Kubernetes 集成 和 在 Kubernetes 上单节点部署 Flink 两种模式中配置服务帐户。 配置 # 为了启用高可用集群（HA-cluster），你必须设置以下配置项:
high-availability (必要的): high-availability 选项必须设置为 KubernetesHaServicesFactory. high-availability: kubernetes high-availability.storageDir (必要的): JobManager 元数据持久化到文件系统 high-availability.storageDir 配置的路径中，并且在 Kubernetes 中只能有一个目录指向此位置。 high-availability.storageDir: s3://flink/recovery storageDir 存储要从 JobManager 失败恢复时所需的所有元数据。</description>
    </item>
    
  </channel>
</rss>
