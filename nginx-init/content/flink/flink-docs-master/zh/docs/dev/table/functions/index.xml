<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>函数 on Apache Flink</title>
    <link>//localhost/flink/flink-docs-master/zh/docs/dev/table/functions/</link>
    <description>Recent content in 函数 on Apache Flink</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="//localhost/flink/flink-docs-master/zh/docs/dev/table/functions/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>函数</title>
      <link>//localhost/flink/flink-docs-master/zh/docs/dev/table/functions/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost/flink/flink-docs-master/zh/docs/dev/table/functions/overview/</guid>
      <description>函数 # Flink 允许用户在 Table API 和 SQL 中使用函数进行数据的转换。
函数类型 # Flink 中的函数有两个划分标准。
一个划分标准是：系统（内置）函数和 Catalog 函数。系统函数没有名称空间，只能通过其名称来进行引用。 Catalog 函数属于 Catalog 和数据库，因此它们拥有 Catalog 和数据库命名空间。 用户可以通过全/部分限定名（catalog.db.func 或 db.func）或者函数名 来对 Catalog 函数进行引用。
另一个划分标准是：临时函数和持久化函数。 临时函数始终由用户创建，它容易改变并且仅在会话的生命周期内有效。 持久化函数不是由系统提供，就是存储在 Catalog 中，它在会话的整个生命周期内都有效。
这两个划分标准给 Flink 用户提供了 4 种函数：
临时性系统函数 系统函数 临时性 Catalog 函数 Catalog 函数 请注意，系统函数始终优先于 Catalog 函数解析，临时函数始终优先于持久化函数解析， 函数解析优先级如下所述。
函数引用 # 用户在 Flink 中可以通过精确、模糊两种引用方式引用函数。
精确函数引用 # 精确函数引用允许用户跨 Catalog，跨数据库调用 Catalog 函数。 例如：select mycatalog.mydb.myfunc(x) from mytable 和 select mydb.myfunc(x) from mytable。</description>
    </item>
    
    <item>
      <title>系统（内置）函数</title>
      <link>//localhost/flink/flink-docs-master/zh/docs/dev/table/functions/systemfunctions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost/flink/flink-docs-master/zh/docs/dev/table/functions/systemfunctions/</guid>
      <description>系统（内置）函数 # Flink Table API &amp;amp; SQL 为用户提供了一组内置的数据转换函数。本页简要介绍了它们。如果你需要的函数尚不支持，你可以实现 用户自定义函数。如果你觉得这个函数够通用，请 创建一个 Jira issue并详细 说明。
标量函数 # 标量函数将零、一个或多个值作为输入并返回单个值作为结果。
比较函数 # SQL 函数 Table 函数 描述 value1 = value2 value1 === value2 如果 value1 等于 value2 返回 TRUE；如果 value1 或者 value2 为 NULL 返回 UNKNOW。 value1 &amp;lt;&amp;gt; value2 value1 !== value2 如果 value1 不等于 value2 返回 TRUE；如果 value1 或 value2 为 NULL 返回 UNKNOWN。 value1 &amp;gt; value2 value1 &amp;gt; value2 如果 value1 大于 value2 返回 TRUE；如果 value1 或 value2 为 NULL 返回 UNKNOWN。 value1 &amp;gt;= value2 value1 &amp;gt;= value2 如果 value1 大于或等于 value2 返回 TRUE；如果 value1 或 value2 为 NULL 返回 UNKNOWN。 value1 &amp;lt; value2 value1 &amp;lt; value2 如果 value1 小于 value2 返回 TRUE；如果 value1 或 value2 为 NULL 返回 UNKNOWN。 value1 &amp;lt;= value2 value1 &amp;lt;= value2 如果 value1 小于或等于 value2 返回 TRUE；如果 value1 或 value2 为 NULL 返回 UNKNOWN。 value IS NULL value.</description>
    </item>
    
    <item>
      <title>自定义函数</title>
      <link>//localhost/flink/flink-docs-master/zh/docs/dev/table/functions/udfs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost/flink/flink-docs-master/zh/docs/dev/table/functions/udfs/</guid>
      <description>自定义函数 # 自定义函数（UDF）是一种扩展开发机制，可以用来在查询语句里调用难以用其他方式表达的频繁使用或自定义的逻辑。
自定义函数可以用 JVM 语言（例如 Java 或 Scala）或 Python 实现，实现者可以在 UDF 中使用任意第三方库，本文聚焦于使用 JVM 语言开发自定义函数。
概述 # 当前 Flink 有如下几种函数：
标量函数 将标量值转换成一个新标量值； 表值函数 将标量值转换成新的行数据； 聚合函数 将多行数据里的标量值转换成一个新标量值； 表值聚合函数 将多行数据里的标量值转换成新的行数据； 异步表值函数 是异步查询外部数据系统的特殊函数。 注意 标量和表值函数已经使用了新的基于数据类型的类型系统，聚合函数仍然使用基于 TypeInformation 的旧类型系统。
以下示例展示了如何创建一个基本的标量函数，以及如何在 Table API 和 SQL 里调用这个函数。
函数用于 SQL 查询前要先经过注册；而在用于 Table API 时，函数可以先注册后调用，也可以 内联 后直接使用。
Java import org.apache.flink.table.api.*; import org.apache.flink.table.functions.ScalarFunction; import static org.apache.flink.table.api.Expressions.*; // 定义函数逻辑 public static class SubstringFunction extends ScalarFunction { public String eval(String s, Integer begin, Integer end) { return s.</description>
    </item>
    
  </channel>
</rss>
